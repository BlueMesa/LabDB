<?php

namespace Proxies;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class MpiCbgFliesBundleEntityFlyVialProxy extends \MpiCbg\FliesBundle\Entity\FlyVial implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    private function _load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    
    public function __toString()
    {
        $this->_load();
        return parent::__toString();
    }

    public function getId()
    {
        $this->_load();
        return parent::getId();
    }

    public function getName()
    {
        $this->_load();
        return parent::getName();
    }

    public function getLabelText()
    {
        $this->_load();
        return parent::getLabelText();
    }

    public function setSetupDate($setupDate)
    {
        $this->_load();
        return parent::setSetupDate($setupDate);
    }

    public function getSetupDate()
    {
        $this->_load();
        return parent::getSetupDate();
    }

    public function setFlipDate($flipDate)
    {
        $this->_load();
        return parent::setFlipDate($flipDate);
    }

    public function getFlipDate()
    {
        $this->_load();
        return parent::getFlipDate();
    }

    public function addChildren(\MpiCbg\FliesBundle\Entity\FlyVial $children)
    {
        $this->_load();
        return parent::addChildren($children);
    }

    public function getChildren()
    {
        $this->_load();
        return parent::getChildren();
    }

    public function setParent(\MpiCbg\FliesBundle\Entity\FlyVial $parent)
    {
        $this->_load();
        return parent::setParent($parent);
    }

    public function getParent()
    {
        $this->_load();
        return parent::getParent();
    }

    public function setStock(\MpiCbg\FliesBundle\Entity\FlyStock $stock)
    {
        $this->_load();
        return parent::setStock($stock);
    }

    public function getStock()
    {
        $this->_load();
        return parent::getStock();
    }

    public function setCross($cross)
    {
        $this->_load();
        return parent::setCross($cross);
    }

    public function getCross()
    {
        $this->_load();
        return parent::getCross();
    }

    public function getMaleCrosses()
    {
        $this->_load();
        return parent::getMaleCrosses();
    }

    public function getVirginCrosses()
    {
        $this->_load();
        return parent::getVirginCrosses();
    }

    public function getCrosses()
    {
        $this->_load();
        return parent::getCrosses();
    }

    public function isLabelPrinted()
    {
        $this->_load();
        return parent::isLabelPrinted();
    }

    public function setLabelPrinted($labelPrinted)
    {
        $this->_load();
        return parent::setLabelPrinted($labelPrinted);
    }

    public function isTrashed()
    {
        $this->_load();
        return parent::isTrashed();
    }

    public function setTrashed($trashed)
    {
        $this->_load();
        return parent::setTrashed($trashed);
    }

    public function isAlive()
    {
        $this->_load();
        return parent::isAlive();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'setupDate', 'flipDate', 'children', 'parent', 'stock', 'cross', 'maleCrosses', 'virginCrosses', 'labelPrinted', 'trashed');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}